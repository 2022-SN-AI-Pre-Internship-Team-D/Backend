version: "3"

services:
  # docker-compose.yml 파일이 밖에 있을 때 기준
  # frontend:
  #   build:
  #     context: ./frontend
  #   command: [ "npm", "start" ] 
  #   restart: always
  #   ports:
  #     - 3000:3000
  #   # networks:
  #   #   - 
  #   volumes:
  #     - ./frontend/:/frontend
  #     - ./frontend/node_modules/:/frontend/node_modules
  #    tty: true

  db:
    container_name: mysqldb
    image: mysql:latest
    env_file :
      - ./backend/devenvs/mysqldb.env
    volumes:
     - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    networks:
      - letterman

  backend:
    container_name: djangolm
    build: ./backend
    command: >
      bash -c "python3 manage.py makemigrations &&
               python3 manage.py migrate &&
               python3 manage.py runserver 0.0.0.0:8080"
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - letterman

  # prometheus:
  #   image: prom/prometheus
  #   restart: 'no'
  #   volumes:
  #     - prometheus_data:/prometheus
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - 9011:9011
  #   network_mode: host
  
  # grafana:
  #   image: grafana/grafana
  #   environment:
  #     GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
  #   restart: 'no'
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   ports:
  #     - 5432:5432
  #   depends_on:
  #     - prometheus
  #   network_mode: host


  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=90d # 90일보다 오래된 metrics는 삭제
      - --storage.tsdb.retention.size=10GB # 10GB를 넘을 시 오래된 metrics 삭제
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/proemtheus/consoles
      - --web.enable-admin-api
    networks:
      - letterman

  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - 4000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      # - GF_SECURITY_ADMIN_USER=admin # grafana 사용자 이름
      # - GF_SECURITY_ADMIN_PASSWORD=admin # grafana 사용자 비밀번호
      # - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - letterman

        
networks:
  letterman:
    driver: bridge

volumes:
  mysql_data: {}
  prometheus_data: {}
  grafana_data: {}  